import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter/material.dart'; // Ajout√© pour debugPrint

// Le plugin de notifications est d√©j√† d√©fini globalement dans main.dart,
// mais il est bon de l'importer et de le r√©utiliser si ce fichier est s√©par√©.
// Pour s'assurer qu'il s'agit bien de la m√™me instance globale, on le passe si n√©cessaire,
// ou on s'assure qu'il est accessible via un singleton ou une m√©thode statique si le code est complexe.
// Pour ce cas, comme il est "final", il est probable qu'il soit globalement accessible.
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
FlutterLocalNotificationsPlugin(); // R√©p√©t√© pour l'autocompl√©tion, mais c'est l'instance globale de main.dart

class AlertListenerService {
  static String? lastAlertId;

  static void startListening() {
    FirebaseFirestore.instance
        .collection('alerts')
        .orderBy('createdAt', descending: true)
        .limit(1) // √âcoute la derni√®re alerte
        .snapshots()
        .listen((snapshot) {
      if (snapshot.docs.isNotEmpty) {
        final alert = snapshot.docs.first;
        final data = alert.data();

        debugPrint('Nouvelle alerte Firestore d√©tect√©e: ${alert.id}'); // Pour le d√©bogage

        // Ne montrer la notification que si c'est une nouvelle alerte (pas la m√™me que la pr√©c√©dente)
        if (alert.id != lastAlertId) {
          lastAlertId = alert.id;

          _showLocalNotification(
            title: 'üö® Alerte v√©hicule',
            body:
            '${data['message'] ?? 'Alerte inconnue'}\nPlaque : ${data['plate'] ?? 'N/A'}',
          );
        } else {
          debugPrint('Alerte ${alert.id} d√©j√† trait√©e.'); // Pour le d√©bogage
        }
      }
    }, onError: (error) {
      debugPrint('Erreur lors de l\'√©coute des alertes: $error');
    });
  }

  static Future<void> _showLocalNotification({
    required String title,
    required String body,
  }) async {
    // Les d√©tails du canal doivent correspondre au canal cr√©√© dans main.dart
    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'alerts_channel', // DOIT CORRESPONDRE √† l'ID du canal dans main.dart
      'Alertes V√©hicules', // Nom du canal visible par l'utilisateur
      channelDescription: 'Notifications visibles des alertes', // Description du canal
      importance: Importance.max, // Niveau d'importance √©lev√©
      priority: Priority.high, // Priorit√© haute
      playSound: true,
      enableVibration: true,
      ticker: 'Alerte v√©hicule', // Texte qui s'affiche bri√®vement dans la barre de statut
      // Autres options comme largeIcon, sound, etc.
    );

    const NotificationDetails notifDetails =
    NotificationDetails(android: androidDetails);

    // Afficher la notification
    await flutterLocalNotificationsPlugin.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000, // ID unique pour la notification
      title,
      body,
      notifDetails,
      // payload: 'some_payload_data', // Optionnel: Donn√©es √† passer si l'utilisateur tape sur la notification
    );
    debugPrint('Notification affich√©e: $title - $body'); // Pour le d√©bogage
  }
}